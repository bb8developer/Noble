# All Videos Information, only admin users have access on this type
type AllVideos implements Node {
  # The ID of an object
  id: ID!

  # all videos list
  videos: [Video]

  # all users list for videos
  users: [User]

  # video count for specific query
  videoCount: Int
}

input assignVideoInput {
  # Assign video & user information
  item: AssignVideosType

  # video filter query information
  query: String

  # video pagination offset
  offset: Int

  # video pagination limit
  limit: Int
  adminMode: Boolean
  clientMutationId: String
}

type assignVideoPayload {
  allVideos: AllVideos
  clientMutationId: String
}

# AssignVideos parameters
input AssignVideosType {
  userIds: [String]
  addVideos: [String]
}

input deleteVideoInput {
  videoIds: [String]

  # video filter query information
  query: String

  # video pagination offset
  offset: Int

  # video pagination limit
  limit: Int
  adminMode: Boolean
  clientMutationId: String
}

type deleteVideoPayload {
  allVideos: AllVideos
  clientMutationId: String
}

input likeVideoInput {
  videoIds: [String]
  liked: Boolean

  # video filter query information
  query: String

  # video pagination offset
  offset: Int

  # video pagination limit
  limit: Int
  adminMode: Boolean
  clientMutationId: String
}

type likeVideoPayload {
  allVideos: AllVideos
  videos: [Video]
  clientMutationId: String
}

input loginInput {
  id: String!
  name: String!
  email: String!
  verified: Boolean
  isAdmin: Boolean
  photo: String!
  facebookToken: String
  googleToken: String
  clientMutationId: String
}

type loginPayload {
  user: User
  accessToken: String
  clientMutationId: String
}

type Mutation {
  signup(input: signupInput!): signupPayload
  login(input: loginInput!): loginPayload
  assignVideo(input: assignVideoInput!): assignVideoPayload
  likeVideo(input: likeVideoInput!): likeVideoPayload
  deleteVideo(input: deleteVideoInput!): deleteVideoPayload
  searchUser(input: searchUserInput!): searchUserPayload
  unAssignVideo(input: unAssignVideoInput!): unAssignVideoPayload

  # Update users admin/verified status
  updateUsers(input: updateUsersInput!): updateUsersPayload
  postVideo(input: postVideoInput!): postVideoPayload
}

# An object with an ID
interface Node {
  # The id of the object.
  id: ID!
}

input postVideoInput {
  videoIds: [String]

  # video filter query information
  query: String

  # video pagination offset
  offset: Int

  # video pagination limit
  limit: Int
  adminMode: Boolean
  clientMutationId: String
}

type postVideoPayload {
  allVideos: AllVideos
  clientMutationId: String
}

type Query {
  # Fetches an object given its ID
  node(
    # The ID of an object
    id: ID!
  ): Node

  # Viewer query
  viewer: ViewerType
}

# Query Videos
type QueryVideos {
  videos: [Video]
  count: Int
}

input searchUserInput {
  # User search keyword
  keyword: String

  # Admin status
  isAdmin: String
  clientMutationId: String
}

type searchUserPayload {
  # Search users result
  users: [User]
  clientMutationId: String
}

input signupInput {
  id: String!
  name: String!
  email: String!
  verified: Boolean
  isAdmin: Boolean
  photo: String!
  clientMutationId: String
}

type signupPayload {
  user: User
  accessToken: String
  clientMutationId: String
}

input unAssignVideoInput {
  videos: [String]

  # video filter query information
  query: String

  # video pagination offset
  offset: Int

  # video pagination limit
  limit: Int
  adminMode: Boolean
  clientMutationId: String
}

type unAssignVideoPayload {
  allVideos: AllVideos
  clientMutationId: String
}

input updateUsersInput {
  users: [UpdateUsersType]
  clientMutationId: String
}

type updateUsersPayload {
  users: [User]
  clientMutationId: String
}

# Update User information
input UpdateUsersType {
  id: String!
  verified: Boolean
  isAdmin: Boolean
}

# A person who uses our app
type User implements Node {
  # The ID of an object
  id: ID!

  # user email
  email: String

  # user name
  name: String

  # status for verified user
  verified: Boolean

  # admin status for user
  isAdmin: Boolean

  # admin status for user
  adminStatus: Boolean

  # user photo url path
  photo: String

  # total video count for user
  videoCount: Int

  # User's assigned videos, and only reviewer account has only this value
  queryVideo(offset: Int, limit: Int, query: String): QueryVideos
}

# A person who uses our app
type Video implements Node {
  # The ID of an object
  id: ID!

  # video id
  videoId: String

  # video title
  title: String

  # video description
  description: String

  # Video tags
  tags: String

  # Video width
  width: Int

  # Video height
  height: Int

  # Video size
  size: Int

  # Video duration
  duration: Float

  # Video images path id
  pictureId: String

  # Video files path id
  sourceId: String

  # Video files path id
  resolutions: String

  # Video thumbnail image count
  thumbnails: Int

  # Video thumbnail image count
  posters: Int

  # Assigned user id
  reviewUserId: String

  # posted status for video
  posted: Boolean

  # Assigned user liked video or not
  reviewStatus: String

  # admin user liked video or not
  adminStatus: String

  # Assigned user watched video or not
  watchStatus: Boolean

  # Total review count for current video, same as reviewer user count
  reviewCount: Int
}

# A viewer object
type ViewerType {
  # Get User information
  user(id: String, adminMode: Boolean): User

  # All Video Information information
  allVideos(
    # video filter query information
    query: String

    # video pagination offset
    offset: Int

    # video pagination limit
    limit: Int
    adminMode: Boolean
  ): AllVideos
}
